// main42.cc is a part of the PYTHIA event generator.
// Copyright (C) 2017 Torbjorn Sjostrand.
// PYTHIA is licenced under the GNU GPL version 2, see COPYING for details.
// Please respect the MCnet Guidelines, see GUIDELINES for details.

// Author: Mikhail Kirsanov, Mikhail.Kirsanov@cern.ch.
// This program illustrates how a file with HepMC events
// can be generated by Pythia8.
// Input and output files are specified on the command line, e.g. like
// ./main42.exe main42.cmnd hepmcout42.dat > out
// The main program contains no analysis; this is intended to happen later.
// It therefore "never" has to be recompiled to handle different tasks.

// WARNING: typically one needs 25 MB/100 events at the LHC.
// Therefore large event samples may be impractical.

#include "Pythia8/Pythia.h"

#include "Pythia8Plugins/HepMC2.h"

using namespace Pythia8;

string add_st(string input, double number) {
  stringstream sout;
  sout << number;
  return input + sout.str();
}

string to_st(double number) {
  stringstream sout;
  sout << number;
  return sout.str();
}

string to_st(int number) {
  stringstream sout;
  sout << number;
  return sout.str();
}

int main(int argc, char * argv[]) {

  // Check that correct number of command-line arguments
  if (argc != 3) {
    cerr << " Unexpected number of command-line arguments. \n You are" <<
      " expected to provide one input and one output file name. \n" <<
      " Program stopped! " << endl;
    return 1;
  }

  // Check that the provided input name corresponds to an existing file.
  ifstream is(argv[1]);
  if (!is) {
    cerr << " Command-line file " << argv[1] << " was not found. \n" <<
      " Program stopped! " << endl;
    return 1;
  }

  // Confirm that external files will be used for input and output.
  cout << "\n >>> PYTHIA settings will be read from file " << argv[1] <<
    " <<< \n >>> HepMC events will be written to file " <<
    argv[2] << " <<< \n" << endl;

  // Interface for conversion from Pythia8::Event to HepMC event.
  HepMC::Pythia8ToHepMC ToHepMC;

  // Specify file where HepMC events will be stored.
  HepMC::IO_GenEvent ascii_io(argv[2], std::ios::out);

  // Generator.
  Pythia pythia;

  // Read in commands from external file.
  pythia.readFile(argv[1]);

  // Extract settings to be used in the main program.
  int nEvent = pythia.mode("Main:numberOfEvents");
  int nAbort = pythia.mode("Main:timesAllowErrors");

  double rinv = 0.3;
  double mass = 20.0;
  double lambda = 1.0;

  pythia.readString("4900001:m0 = 5000");
  pythia.readString("4900002:m0 = 5000");
  pythia.readString("4900003:m0 = 5000");
  pythia.readString("4900004:m0 = 5000");
  pythia.readString("4900005:m0 = 5000");
  pythia.readString("4900006:m0 = 5000");
  pythia.readString("4900011:m0 = 5000");
  pythia.readString("4900012:m0 = 5000");
  pythia.readString("4900013:m0 = 5000");
  pythia.readString("4900014:m0 = 5000");
  pythia.readString("4900015:m0 = 5000");
  pythia.readString("4900016:m0 = 5000");

  pythia.readString("HiddenValley:Ngauge  =2");
  //  pythia.readString("HiddenValley:Run = on");                                                                            
  pythia.readString(add_st("HiddenValley:Lambda = ", lambda));

  //  cout<<"running coupling: conf. scale "<<lambda<<endl;
  pythia.readString(add_st("HiddenValley:alphaFSR = ", lambda));

  pythia.readString("HiddenValley:spinFv = 0");
  pythia.readString("HiddenValley:FSR = on");
  pythia.readString("HiddenValley:fragment = on");

  pythia.readString(add_st("4900101:m0 = ", mass / 2));
  pythia.readString(add_st("4900101:mWidth = ", mass / 100));
  pythia.readString(add_st("4900101:mMin = ", mass / 2 - mass / 100));
  pythia.readString(add_st("4900101:mMax = ", mass / 2 + mass / 100));

  //fix mass of dark scalar mesons
  //spin 0 diagonal 
  pythia.readString(add_st("4900111:m0 = ", mass));
  //spin 1 diagonal
  pythia.readString(add_st("4900113:m0 = ", mass));

  //spin 0 charged (DM)
  pythia.readString(add_st("4900211:m0 = ", mass / 2.0 - 0.01));
  //spin 1 charged (DM)
  pythia.readString(add_st("4900213:m0 = ", mass / 2.0 - 0.01));

  //stop showering when pt less than threshold
  pythia.readString(add_st("HiddenValley:pTminFSR = ", 1.1 * lambda));

  pythia.readString("4900111:onechannel = 1 " +
    to_st(1.0 - rinv) +
    " 91 -3 3");

  pythia.readString("4900111:addchannel = 1 " +
    to_st(rinv) +
    " 0 4900211 -4900211");

  pythia.readString("4900113:onechannel = 1 " +
    to_st((1 - rinv) / 5.) +
    " 91 -1 1");

  pythia.readString("4900113:addchannel = 1 " +
    to_st((1 - rinv) / 5.) +
    " 91 -2 2");

  pythia.readString("4900113:addchannel = 1 " +
    to_st((1 - rinv) / 5.) +
    " 91 -3 3");

  pythia.readString("4900113:addchannel = 1 " +
    to_st((1 - rinv) / 5.) +
    " 91 -4 4");

  pythia.readString("4900113:addchannel = 1 " +
    to_st((1 - rinv) / 5.) +
    " 91 -5 5");

  pythia.readString("4900113:addchannel = 1 " +
    to_st(rinv) +
    " 0 4900213 -4900213");

  pythia.readString(add_st("HiddenValley:probVector = ", 0.75));

  // Initialization.                                                                                
  pythia.init();

  // Begin event loop.
  int iAbort = 0;
  for (int iEvent = 0; iEvent < nEvent; ++iEvent) {

    // Generate event.
    if (!pythia.next()) {

      // If failure because reached end of file then exit event loop.
      if (pythia.info.atEndOfFile()) {
        cout << " Aborted since reached end of Les Houches Event File\n";
        break;
      }

      // First few failures write off as "acceptable" errors, then quit.
      if (++iAbort < nAbort) continue;
      cout << " Event generation aborted prematurely, owing to error!\n";
      break;
    }

    // Construct new empty HepMC event and fill it.
    // Units will be as chosen for HepMC build, but can be changed
    // by arguments, e.g. GenEvt( HepMC::Units::GEV, HepMC::Units::MM)
    HepMC::GenEvent * hepmcevt = new HepMC::GenEvent();
    ToHepMC.fill_next_event(pythia, hepmcevt);

    // Write the HepMC event to file. Done with it.
    ascii_io << hepmcevt;
    delete hepmcevt;

    // End of event loop. Statistics.
  }
  pythia.stat();

  // Done.
  return 0;
}